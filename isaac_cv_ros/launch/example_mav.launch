<launch>
  <!-- Gazebo arguments -->
  <arg name="mav_name" default="firefly"/>
  <arg name="gui" default="false"/>
  <arg name="verbose_gazebo" default="false"/>

  <!-- Voxblox arguments -->
  <arg name="voxel_size" default="0.1"/>
  <arg name="voxels_per_side" default="16"/>
  <arg name="ray_length" default="5.0"/>
  <arg name="verbose_voxblox" default="false"/>
    
  <!-- Unreal/Routine arguments -->
  <arg name="model_type" default="ground_truth"/>
  <arg name="uecv_mode" default="standard"/>
  <arg name="slowdown" default="0.3"/>
  
  <!-- Planner -->
  <arg name="delay" default="5.0"/>
  <arg name="mav_velocity" default="0.3"/>
  
  


  <!-- Setup empty gazebo world for physics-->
  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find unreal_cv_ros)/content/gazebo_empty.world" />
    <arg name="debug" value="false" />
    <arg name="paused" value="true" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose_gazebo)"/>
  </include>

  <!-- Setup a mav with odom sensor -->
  <group ns="$(arg mav_name)">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_ground_truth" value="true" />
      <arg name="enable_logging" value="false" />
      <arg name="z" value="0" />
    </include>
    
    <!-- MPC trajectory tracker-->
    <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg mav_name).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      <param name="use_rc_teleop" value="false"/>
      <param name="verbose" value="false" />
      <param name="reference_frame" value="world"/>
      <param name="sampling_time" value="0.0021"/>
    </node>
    
    <!-- Rotor input controller -->
    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
		</node>

		<!-- static camera transform -->
    <node pkg="tf" type="static_transform_publisher" name="tf_camera_to_link" args="0 0 0 -0.5 0.5 -0.5 0.5 /$(arg mav_name)/base_link /camera 100"/>	
	</group>



  <group ns="unreal">
    <!-- Unreal vision client -->
    <node name="unreal_ros_client" pkg="unreal_cv_ros" type="unreal_ros_client.py" output="screen">
			<param name="mode" value="$(arg uecv_mode)"/>
		  <param name="slowdown" value="$(arg slowdown)"/>
		  <remap from="odometry" to="/$(arg mav_name)/ground_truth/odometry" />
    </node>
    
    <!-- Unreal sensor model -->
    <node name="unreal_sensor_model" pkg="unreal_cv_ros" type="sensor_model.py" output="screen">
			<param name="model_type" value="ground_truth"/>
      <param name="maximum_distance" value="$(arg ray_length)"/>
		  <remap from="ue_sensor_raw" to="unreal_ros_client/ue_sensor_raw" />
    </node>
    
    <!-- Simulation manager for launching and monitoring-->
		<node name="simulation_manager" pkg="unreal_cv_ros" type="simulation_manager.py" output="screen">
			<param name="ns_mav" value="/$(arg mav_name)" />
			<param name="monitor" value="true" />
			<remap from="ue_raw_in" to="unreal_ros_client/ue_sensor_raw" />
			<remap from="ue_out_in" to="unreal_sensor_model/ue_sensor_out" />
		</node>
  </group>



	<group ns="planner">
		<!-- Voxblox for mapping-->
		<node name="voxblox_node" pkg="voxblox_ros" type="esdf_server" output="screen" args="-alsologtostderr">
			<remap from="pointcloud" to="/unreal/unreal_sensor_model/ue_sensor_out"/>
		  <param name="publish_esdf_map" value="true" />
		  <param name="publish_pointclouds" value="true" />
			<param name="tsdf_voxel_size" value="$(arg voxel_size)" />
			<param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
			<param name="color_mode" value="color" />
			<param name="use_tf_transforms" value="true" />
			<param name="update_mesh_every_n_sec" value="0.5" />
			<param name="min_time_between_msgs_sec" value="0.0" />
			<param name="method" value="merged" />
			<param name="use_const_weight" value="false" />
		  <param name="max_ray_length" value="$(arg ray_length)" />
			<param name="allow_clear" value="true" />
			<param name="verbose" value="$(arg verbose_voxblox)" />
			<param name="world_frame" value="world" />
		</node>
  
		<!-- Example planner that publishes a trajectory request -->
		<node name="example_mav_node" pkg="unreal_cv_ros" type="example_mav.py" output="screen" >		
			<param name="delay" value="$(arg delay)" />
			<param name="mav_velocity" value="$(arg mav_velocity)" />
			<remap from="unreal_simulation_ready" to="/unreal/simulation_manager/simulation_ready"/>
			<remap from="command/trajectory" to="/$(arg mav_name)/command/trajectory"/>
		</node>
	</group>
	
	
	
	<!-- Visualization -->
	<node type="rviz" name="rviz_voxblox" pkg="rviz" args="-d $(find unreal_cv_ros)/cfg/example_mav.rviz"/>
</launch>
